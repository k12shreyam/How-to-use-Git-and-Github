    
What happens when you initialize a repository? Why do you need to do it?

     When you initialize a repository a hidden directory call .git is created. This directory contains all the information
     that allows the version control to work. This data has to be stored somewhere so it makes sense to put it in a
     subdirectory of the topmost directory of your project.

How is the staging area different from the working directory and the repository? What value do you think it offers?

     The staging area is an area where you can stage files to be committed; this allows you to group some files, out of
     all of the changed files in the working directory, so that the grouped files can be committed together. This took me
     awhile to understand.

How can you use the staging area to make sure you have one commit per logical change?

     Using the git add command allows you to add the files seperately and even choose which lines are to be committed.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

     If you want to experiment with a new feature, you can use a new branch. Or if you want to create a new version of a
     project, you can create a new branch. It's good to use the master branch as a stable branch, the branch where everything
     is working well just as it is, and then use other branches to experiment with changes.

How do the diagrams help you visualize the branch structure?

     You can see easily the starting point of a new branch and also the commit where two branches come together.
     They show me the sequence of commits; what's reachable; what's not.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

     The result of merging two branches together is a combination of the changes made in both branches. The diagram shows that 
     the new commit takes both of the branch tips as it's parents and the new commit becomes the head and the tip of master.
     This makes sense to display it as two arrows pointing to both parents because code was taken a merged from both tips.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

     When there are conflicts, git asks you to resolve the conflicts. This allows you to ensure that humans have created
     all of the code. Machine learning / AI isn't sophisticated enough to understand, yet, what a human wanted
